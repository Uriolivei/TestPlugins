name: Build CloudStream Plugins

# https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#concurrency
concurrency:
  group: "build"
  cancel-in-progress: true

on:
  push:
    branches:
      # elige tu rama por defecto
      - master
      - main
    paths-ignore:
      - '*.md' # Ignora los pushes a archivos Markdown

jobs:
  build:
    runs-on: ubuntu-latest # Ejecuta el job en una máquina virtual Ubuntu

    steps:
      - name: Checkout Código Fuente
        uses: actions/checkout@v4 # ¡IMPORTANTE! Usa una versión específica para estabilidad (ej. v4)
        with:
          path: "src" # Clona el repositorio en la carpeta 'src'

      - name: Checkout Rama de Builds
        uses: actions/checkout@v4 # ¡IMPORTANTE! Usa una versión específica para estabilidad (ej. v4)
        with:
          ref: "builds" # Clona la rama 'builds'
          path: "builds" # En la carpeta 'builds'
          # depth: 0 # Considera descomentar si tienes problemas con historial incompleto en la rama 'builds'

      - name: Limpiar Builds Antiguos
        run: |
          mkdir -p $GITHUB_WORKSPACE/builds # Asegura que el directorio exista
          rm -f $GITHUB_WORKSPACE/builds/*.cs3 # Usa -f para no fallar si no hay archivos .cs3
        shell: bash # Especifica el shell para mayor claridad

      - name: Configurar JDK 17
        uses: actions/setup-java@v4 # ¡IMPORTANTE! Usa una versión específica para estabilidad
        with:
          java-version: '17' # Versión de Java necesaria
          distribution: 'temurin' # Distribución recomendada de JDK

      - name: Configurar Android SDK
        uses: android-actions/setup-android@v2 # ¡IMPORTANTE! Usa una versión específica para estabilidad

      - name: Construir Plugins
        run: |
          cd $GITHUB_WORKSPACE/src # Cambia al directorio del código fuente
          chmod +x gradlew # Otorga permisos de ejecución al script gradlew
          ./gradlew make makePluginsJson # Ejecuta las tareas de Gradle para construir
          
          # Asegura que los directorios de destino existan antes de copiar
          mkdir -p $GITHUB_WORKSPACE/builds
          # Copia los archivos .cs3 y plugins.json a la carpeta 'builds'
          cp **/build/*.cs3 $GITHUB_WORKSPACE/builds/ || true # '|| true' para no fallar si no se encuentran .cs3
          cp build/plugins.json $GITHUB_WORKSPACE/builds/
        shell: bash

      - name: Configurar Git para Builds
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Commit y Push de Builds
        run: |
          cd $GITHUB_WORKSPACE/builds # Cambia al directorio de builds
          
          # Verifica si hay cambios para commitear
          if git diff --exit-code --quiet; then
            echo "No hay cambios en los builds para commitear. Saliendo."
            exit 0 # Sale del paso exitosamente si no hay cambios
          fi
          
          git add . # Añade todos los archivos nuevos/modificados
          
          # Crea un nuevo commit. Usa GITHUB_RUN_ID para un mensaje único.
          git commit -m "Build de plugins ($GITHUB_RUN_ID) desde $GITHUB_SHA"
          
          # Push normal, no forzado, ya que estamos creando un nuevo commit
          git push origin builds
        shell: bash # Especifica el shell para mayor claridad
